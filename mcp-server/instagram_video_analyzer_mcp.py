#!/usr/bin/env python3
"""
Instagram Video Analyzer MCP Server

Este servidor MCP fornece ferramentas para an√°lise de v√≠deos do Instagram usando IA.
Conecta-se √† API do Instagram Video Analyzer para processar v√≠deos e retornar an√°lises detalhadas.

Ferramentas dispon√≠veis:
- analyze_instagram_video: An√°lise completa de v√≠deo
- get_video_info: Informa√ß√µes b√°sicas do v√≠deo
- get_job_status: Status de um job de an√°lise
- list_recent_analyses: Lista an√°lises recentes
- cancel_job: Cancela um job em andamento
- get_system_stats: Estat√≠sticas do sistema

Recursos dispon√≠veis:
- analysis://{job_id}: Resultado de uma an√°lise espec√≠fica
- jobs://recent: Lista de jobs recentes
- stats://system: Estat√≠sticas do sistema
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional
from contextlib import asynccontextmanager
from collections.abc import AsyncIterator

import httpx
from pydantic import BaseModel, Field

from mcp.server.fastmcp import FastMCP, Context
from mcp.server.models import InitializationOptions

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes do servidor
API_BASE_URL = "http://localhost:8000"
REQUEST_TIMEOUT = 300.0  # 5 minutos
MAX_RETRIES = 3

# Modelos Pydantic para valida√ß√£o
class AnalysisRequest(BaseModel):
    """Modelo para requisi√ß√£o de an√°lise"""
    url: str = Field(description="URL do v√≠deo do Instagram")
    analysis_type: str = Field(
        default="comprehensive",
        description="Tipo de an√°lise: comprehensive, summary, transcription, visual_description"
    )

class JobStatusResponse(BaseModel):
    """Modelo para resposta de status do job"""
    job_id: str
    status: str
    progress: int
    created_at: Optional[str] = None
    started_at: Optional[str] = None
    completed_at: Optional[str] = None
    error_message: Optional[str] = None
    analysis_result: Optional[Dict[str, Any]] = None

class SystemStats(BaseModel):
    """Modelo para estat√≠sticas do sistema"""
    total_jobs: int
    completed_jobs: int
    failed_jobs: int
    pending_jobs: int
    success_rate: float
    average_processing_time: Optional[float] = None

# Cliente HTTP global
http_client: Optional[httpx.AsyncClient] = None

@asynccontextmanager
async def app_lifespan(server: FastMCP) -> AsyncIterator[Dict[str, Any]]:
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    global http_client
    
    # Inicializa√ß√£o
    logger.info("üöÄ Iniciando Instagram Video Analyzer MCP Server...")
    http_client = httpx.AsyncClient(
        base_url=API_BASE_URL,
        timeout=httpx.Timeout(REQUEST_TIMEOUT),
        limits=httpx.Limits(max_connections=10, max_keepalive_connections=5)
    )
    
    # Verificar se a API est√° dispon√≠vel
    try:
        response = await http_client.get("/health")
        if response.status_code == 200:
            logger.info("‚úÖ Conex√£o com API estabelecida")
        else:
            logger.warning(f"‚ö†Ô∏è API respondeu com status {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar com API: {e}")
    
    try:
        yield {"http_client": http_client}
    finally:
        # Limpeza
        logger.info("üîÑ Encerrando Instagram Video Analyzer MCP Server...")
        if http_client:
            await http_client.aclose()
        logger.info("‚úÖ Servidor encerrado com sucesso")

# Criar servidor MCP
mcp = FastMCP(
    name="Instagram Video Analyzer",
    lifespan=app_lifespan
)

# ============================================================================
# FERRAMENTAS (TOOLS)
# ============================================================================

@mcp.tool()
async def analyze_instagram_video(
    url: str,
    analysis_type: str = "comprehensive",
    *,
    ctx: Context
) -> Dict[str, Any]:
    """
    Analisa um v√≠deo do Instagram usando IA.
    
    Args:
        url: URL do v√≠deo do Instagram (reel, IGTV, ou post com v√≠deo)
        analysis_type: Tipo de an√°lise - comprehensive, summary, transcription, visual_description
        
    Returns:
        Resultado da an√°lise com job_id e status
    """
    await ctx.info(f"üé¨ Iniciando an√°lise de v√≠deo: {url}")
    
    # Validar tipo de an√°lise
    valid_types = ["comprehensive", "summary", "transcription", "visual_description"]
    if analysis_type not in valid_types:
        await ctx.error(f"Tipo de an√°lise inv√°lido: {analysis_type}")
        raise ValueError(f"Tipo de an√°lise deve ser um de: {', '.join(valid_types)}")
    
    # Validar URL do Instagram
    if not any(domain in url for domain in ["instagram.com", "instagr.am"]):
        await ctx.error("URL n√£o √© do Instagram")
        raise ValueError("URL deve ser do Instagram")
    
    try:
        # Fazer requisi√ß√£o para API
        payload = {
            "instagram_url": url,
            "analysis_type": analysis_type
        }
        
        response = await http_client.post("/api/video/analyze", json=payload)
        
        if response.status_code == 200:
            result = response.json()
            job_id = result.get("job_id")
            
            await ctx.info(f"‚úÖ Job criado com sucesso: {job_id}")
            
            # Aguardar conclus√£o da an√°lise
            await ctx.info("‚è≥ Aguardando conclus√£o da an√°lise...")
            final_result = await _wait_for_completion(job_id, ctx)
            
            return {
                "success": True,
                "job_id": job_id,
                "status": "completed",
                "analysis": final_result
            }
        else:
            error_msg = f"Erro na API: {response.status_code} - {response.text}"
            await ctx.error(error_msg)
            return {
                "success": False,
                "error": error_msg
            }
            
    except Exception as e:
        error_msg = f"Erro ao processar an√°lise: {str(e)}"
        await ctx.error(error_msg)
        return {
            "success": False,
            "error": error_msg
        }

@mcp.tool()
async def get_job_status(job_id: str, *, ctx: Context) -> Dict[str, Any]:
    """
    Verifica o status de um job de an√°lise.
    
    Args:
        job_id: ID do job de an√°lise
        
    Returns:
        Status atual do job
    """
    await ctx.debug(f"üîç Verificando status do job: {job_id}")
    
    try:
        response = await http_client.get(f"/api/video/status/{job_id}")
        
        if response.status_code == 200:
            result = response.json()
            await ctx.debug(f"Status obtido: {result.get('status')}")
            return result
        else:
            error_msg = f"Erro ao obter status: {response.status_code}"
            await ctx.error(error_msg)
            return {"error": error_msg}
            
    except Exception as e:
        error_msg = f"Erro ao verificar status: {str(e)}"
        await ctx.error(error_msg)
        return {"error": error_msg}

@mcp.tool()
async def list_recent_analyses(
    limit: int = 10,
    page: int = 1,
    *,
    ctx: Context
) -> Dict[str, Any]:
    """
    Lista an√°lises recentes.
    
    Args:
        limit: N√∫mero m√°ximo de an√°lises a retornar (padr√£o: 10)
        page: P√°gina para pagina√ß√£o (padr√£o: 1)
        
    Returns:
        Lista de an√°lises recentes
    """
    await ctx.debug(f"üìã Listando an√°lises recentes (limit: {limit}, page: {page})")
    
    try:
        params = {"per_page": limit, "page": page}
        response = await http_client.get("/api/jobs", params=params)
        
        if response.status_code == 200:
            result = response.json()
            await ctx.info(f"‚úÖ Encontradas {len(result.get('jobs', []))} an√°lises")
            return result
        else:
            error_msg = f"Erro ao listar an√°lises: {response.status_code}"
            await ctx.error(error_msg)
            return {"error": error_msg}
            
    except Exception as e:
        error_msg = f"Erro ao listar an√°lises: {str(e)}"
        await ctx.error(error_msg)
        return {"error": error_msg}

@mcp.tool()
async def cancel_job(job_id: str, *, ctx: Context) -> Dict[str, Any]:
    """
    Cancela um job de an√°lise em andamento.
    
    Args:
        job_id: ID do job a ser cancelado
        
    Returns:
        Resultado da opera√ß√£o de cancelamento
    """
    await ctx.info(f"üõë Cancelando job: {job_id}")
    
    try:
        response = await http_client.post(f"/api/jobs/{job_id}/cancel")
        
        if response.status_code == 200:
            await ctx.info("‚úÖ Job cancelado com sucesso")
            return {"success": True, "message": "Job cancelado com sucesso"}
        else:
            error_msg = f"Erro ao cancelar job: {response.status_code}"
            await ctx.error(error_msg)
            return {"success": False, "error": error_msg}
            
    except Exception as e:
        error_msg = f"Erro ao cancelar job: {str(e)}"
        await ctx.error(error_msg)
        return {"success": False, "error": error_msg}

@mcp.tool()
async def get_system_stats(*, ctx: Context) -> Dict[str, Any]:
    """
    Obt√©m estat√≠sticas do sistema de an√°lise.
    
    Returns:
        Estat√≠sticas do sistema
    """
    await ctx.debug("üìä Obtendo estat√≠sticas do sistema")
    
    try:
        response = await http_client.get("/api/jobs/stats")
        
        if response.status_code == 200:
            result = response.json()
            await ctx.debug("‚úÖ Estat√≠sticas obtidas")
            return result
        else:
            error_msg = f"Erro ao obter estat√≠sticas: {response.status_code}"
            await ctx.error(error_msg)
            return {"error": error_msg}
            
    except Exception as e:
        error_msg = f"Erro ao obter estat√≠sticas: {str(e)}"
        await ctx.error(error_msg)
        return {"error": error_msg}

@mcp.tool()
async def get_video_info(url: str, *, ctx: Context) -> Dict[str, Any]:
    """
    Obt√©m informa√ß√µes b√°sicas de um v√≠deo do Instagram sem fazer an√°lise completa.
    
    Args:
        url: URL do v√≠deo do Instagram
        
    Returns:
        Informa√ß√µes b√°sicas do v√≠deo
    """
    await ctx.info(f"‚ÑπÔ∏è Obtendo informa√ß√µes do v√≠deo: {url}")
    
    # Validar URL do Instagram
    if not any(domain in url for domain in ["instagram.com", "instagr.am"]):
        await ctx.error("URL n√£o √© do Instagram")
        raise ValueError("URL deve ser do Instagram")
    
    try:
        # Por enquanto, retorna informa√ß√µes b√°sicas
        # Em uma implementa√ß√£o completa, isso poderia usar o Instaloader diretamente
        return {
            "url": url,
            "platform": "Instagram",
            "status": "URL v√°lida",
            "note": "Para an√°lise completa, use analyze_instagram_video"
        }
        
    except Exception as e:
        error_msg = f"Erro ao obter informa√ß√µes: {str(e)}"
        await ctx.error(error_msg)
        return {"error": error_msg}

# ============================================================================
# RECURSOS (RESOURCES)
# ============================================================================

@mcp.resource("analysis://{job_id}")
async def get_analysis_result(job_id: str) -> str:
    """
    Obt√©m o resultado de uma an√°lise espec√≠fica.
    
    Args:
        job_id: ID do job de an√°lise
        
    Returns:
        Resultado da an√°lise em formato JSON
    """
    try:
        response = await http_client.get(f"/api/video/status/{job_id}")
        
        if response.status_code == 200:
            result = response.json()
            return json.dumps(result, indent=2, ensure_ascii=False)
        else:
            return json.dumps({"error": f"Erro ao obter an√°lise: {response.status_code}"})
            
    except Exception as e:
        return json.dumps({"error": f"Erro ao obter an√°lise: {str(e)}"})

@mcp.resource("jobs://recent")
async def get_recent_jobs() -> str:
    """
    Obt√©m lista de jobs recentes.
    
    Returns:
        Lista de jobs em formato JSON
    """
    try:
        response = await http_client.get("/api/jobs?per_page=20")
        
        if response.status_code == 200:
            result = response.json()
            return json.dumps(result, indent=2, ensure_ascii=False)
        else:
            return json.dumps({"error": f"Erro ao obter jobs: {response.status_code}"})
            
    except Exception as e:
        return json.dumps({"error": f"Erro ao obter jobs: {str(e)}"})

@mcp.resource("stats://system")
async def get_system_statistics() -> str:
    """
    Obt√©m estat√≠sticas do sistema.
    
    Returns:
        Estat√≠sticas em formato JSON
    """
    try:
        response = await http_client.get("/api/jobs/stats")
        
        if response.status_code == 200:
            result = response.json()
            return json.dumps(result, indent=2, ensure_ascii=False)
        else:
            return json.dumps({"error": f"Erro ao obter estat√≠sticas: {response.status_code}"})
            
    except Exception as e:
        return json.dumps({"error": f"Erro ao obter estat√≠sticas: {str(e)}"})

# ============================================================================
# FUN√á√ïES AUXILIARES
# ============================================================================

async def _wait_for_completion(job_id: str, ctx: Context, max_wait: int = 300) -> Dict[str, Any]:
    """
    Aguarda a conclus√£o de um job.
    
    Args:
        job_id: ID do job
        ctx: Contexto para logging
        max_wait: Tempo m√°ximo de espera em segundos
        
    Returns:
        Resultado da an√°lise
    """
    waited = 0
    while waited < max_wait:
        try:
            response = await http_client.get(f"/api/video/status/{job_id}")
            
            if response.status_code == 200:
                status_data = response.json()
                status = status_data.get("status")
                progress = status_data.get("progress", 0)
                
                await ctx.debug(f"Status: {status}, Progresso: {progress}%")
                
                if status == "completed":
                    await ctx.info("üéâ An√°lise conclu√≠da com sucesso!")
                    return status_data.get("analysis_result", {})
                elif status == "failed":
                    error = status_data.get("error_message", "Erro desconhecido")
                    await ctx.error(f"An√°lise falhou: {error}")
                    raise Exception(f"An√°lise falhou: {error}")
                
                # Aguardar antes da pr√≥xima verifica√ß√£o
                await asyncio.sleep(5)
                waited += 5
            else:
                await ctx.error(f"Erro ao verificar status: {response.status_code}")
                raise Exception(f"Erro ao verificar status: {response.status_code}")
                
        except Exception as e:
            await ctx.error(f"Erro durante espera: {str(e)}")
            raise
    
    await ctx.error("Timeout aguardando conclus√£o da an√°lise")
    raise Exception("Timeout aguardando conclus√£o da an√°lise")

# ============================================================================
# EXECU√á√ÉO PRINCIPAL
# ============================================================================

def main():
    """Ponto de entrada principal do servidor MCP"""
    logger.info("üé¨ Instagram Video Analyzer MCP Server")
    logger.info("üì° Conectando √† API em: " + API_BASE_URL)
    mcp.run()

if __name__ == "__main__":
    main()
